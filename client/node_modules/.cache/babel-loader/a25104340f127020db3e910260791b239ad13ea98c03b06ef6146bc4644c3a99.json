{"ast":null,"code":"// // 1. Import hook\n// import axios from \"axios\";\n// import React, { createContext, useRef, useState } from \"react\";\n\n// // 2. Create Context / Store\n\n// export const AuthContext = createContext();\n\n// // 3. Create provider\n// export const AuthContextProvider = (props) => {\n//   const [isUser, setIsUser] = useState(false);\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [errors, setErrors] = useState(null);\n\n//   const loginFunction = async (formData) => {\n//     console.log(\"formData\", formData);\n//     try {\n//       const { data } = await axios.post(\n//         \"http://localhost:5002/api/user/login\",\n//         formData\n//       );\n\n//       if (data) {\n//         setUser(data.user);\n//       }\n//     } catch (error) {\n//       setErrors(error.message);\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem(\"token\");\n//     setIsUser(false);\n//     setUser(null);\n//   };\n\n//   const getPersonalProfile = async () => {\n//     try {\n//       //const user = await userController.getPersonalProfile();\n//       setUser(user);\n//     } catch (error) {\n//       console.log(\"Error getting profile\", error);\n//       logout();\n//     }\n//   };\n\n//   const checkIfUserIsLoggedIn = () => {\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       console.log(\"User is logged in\");\n//       getPersonalProfile();\n//       setIsUser(true);\n//       setLoading(false);\n//     } else {\n//       console.log(\"User is NOT logged in\");\n//       setIsUser(false);\n//       setLoading(false);\n//     }\n//   };\n\n//   // 4. Move state and function\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         loginFunction,\n//         logout,\n//         isUser,\n//         user,\n//         setUser,\n//         getPersonalProfile,\n//         loading,\n//         errors,\n//         setErrors,\n//         checkIfUserIsLoggedIn,\n//       }}\n//     >\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/Users/j/Desktop/CAB/20Design-MERN/client/src/context/AuthContext.js"],"sourcesContent":["// // 1. Import hook\n// import axios from \"axios\";\n// import React, { createContext, useRef, useState } from \"react\";\n\n// // 2. Create Context / Store\n\n// export const AuthContext = createContext();\n\n// // 3. Create provider\n// export const AuthContextProvider = (props) => {\n//   const [isUser, setIsUser] = useState(false);\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [errors, setErrors] = useState(null);\n\n//   const loginFunction = async (formData) => {\n//     console.log(\"formData\", formData);\n//     try {\n//       const { data } = await axios.post(\n//         \"http://localhost:5002/api/user/login\",\n//         formData\n//       );\n\n//       if (data) {\n//         setUser(data.user);\n//       }\n//     } catch (error) {\n//       setErrors(error.message);\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem(\"token\");\n//     setIsUser(false);\n//     setUser(null);\n//   };\n\n//   const getPersonalProfile = async () => {\n//     try {\n//       //const user = await userController.getPersonalProfile();\n//       setUser(user);\n//     } catch (error) {\n//       console.log(\"Error getting profile\", error);\n//       logout();\n//     }\n//   };\n\n//   const checkIfUserIsLoggedIn = () => {\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       console.log(\"User is logged in\");\n//       getPersonalProfile();\n//       setIsUser(true);\n//       setLoading(false);\n//     } else {\n//       console.log(\"User is NOT logged in\");\n//       setIsUser(false);\n//       setLoading(false);\n//     }\n//   };\n\n//   // 4. Move state and function\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         loginFunction,\n//         logout,\n//         isUser,\n//         user,\n//         setUser,\n//         getPersonalProfile,\n//         loading,\n//         errors,\n//         setErrors,\n//         checkIfUserIsLoggedIn,\n//       }}\n//     >\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}