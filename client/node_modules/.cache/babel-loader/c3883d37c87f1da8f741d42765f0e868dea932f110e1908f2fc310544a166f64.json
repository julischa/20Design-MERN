{"ast":null,"code":"// import React, { useContext, useEffect, useRef, useState } from \"react\";\n// import Button from \"react-bootstrap/Button\";\n// import Form from \"react-bootstrap/Form\";\n// import { useNavigate } from \"react-router-dom\";\n\n// function Register() {\n//   const [errors, setErrors] = useState(null);\n//   const [filteredErrors, setFilteredErrors] = useState(null);\n//   const redirectTo = useNavigate();\n//   const username = useRef();\n//   const firstName = useRef();\n//   const lastName = useRef();\n//   const email = useRef();\n//   const password = useRef();\n//   const confirmationPassword = useRef();\n\n//   const filterErrors = () => {\n//     if (errors) {\n//       for (let i = 0; i < errors.length; i++) {\n//         if (errors[i].msg === \"Email is required\") {\n//           for (let j = 0; j < errors.length; j++) {\n//             if (errors[j].msg === \"Invalid email format\") {\n//               errors.splice(j, 1);\n//               setFilteredErrors(errors);\n//             }\n//           }\n//         } else {\n//           setFilteredErrors(errors);\n//         }\n//       }\n//     }\n//   };\n\n//   const register = async () => {\n//     var myHeaders = new Headers();\n//     myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n//     const urlencoded = new URLSearchParams();\n//     urlencoded.append(\"username\", username.current.value);\n//     urlencoded.append(\"firstName\", firstName.current.value);\n//     urlencoded.append(\"lastName\", lastName.current.value);\n//     urlencoded.append(\"email\", email.current.value);\n//     urlencoded.append(\"password\", password.current.value);\n//     urlencoded.append(\n//       \"password_confirmation\",\n//       confirmationPassword.current.value\n//     );\n\n//     const requestOptions = {\n//       method: \"POST\",\n//       headers: myHeaders,\n//       body: urlencoded,\n//       redirect: \"follow\",\n//     };\n//     try {\n//       const response = await fetch(\n//         `${server}/api/users/register`,\n//         requestOptions\n//       );\n//       const result = await response.json();\n//       if (result.errors) {\n//         setErrors(result.errors);\n//       } else {\n//         alert(\"Registration successful!\");\n//         redirectTo(\"/login\");\n//       }\n//     } catch (error) {\n//       console.log(\"error :>> \", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     filterErrors();\n//   }, [errors]);\n\n//   useEffect(() => {\n//     checkIfUserIsLoggedIn();\n//   }, []);\n\n//   return (\n//     <>\n//   <h1 style={{ textAlign: \"center\" }}>Register</h1>\n\n//         <Form\n//           noValidate\n//           onSubmit={(event) => {\n//             event.preventDefault();\n//             register();\n//           }}\n//           style={{ padding: \"20px\" }}\n//         >\n//           <div className=\"formFlex\">\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\n//               <Form.Label>Username</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 placeholder=\"Enter username\"\n//                 name=\"username\"\n//                 ref={username}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"Username is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   } else if (error.msg === \"Username already in use\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicFirstName\">\n//               <Form.Label>First Name</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 placeholder=\"Enter first name\"\n//                 name=\"firstName\"\n//                 ref={firstName}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"First name is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicLastName\">\n//               <Form.Label>Last Name</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 placeholder=\"Enter last name\"\n//                 name=\"lastName\"\n//                 ref={lastName}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"Last name is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n//               <Form.Label>Email</Form.Label>\n//               <Form.Control\n//                 type=\"email\"\n//                 placeholder=\"Enter email\"\n//                 name=\"email\"\n//                 ref={email}\n//               />\n//               {filteredErrors &&\n//                 filteredErrors.map((error, key) => {\n//                   if (error.msg === \"Email is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                   if (error.msg === \"Invalid email format\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   } else if (error.msg === \"Email already in use\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n//               <Form.Label>Password</Form.Label>\n//               <Form.Control\n//                 type=\"password\"\n//                 placeholder=\"Enter password\"\n//                 name=\"password\"\n//                 ref={password}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"Invalid password\") {\n//                     return (\n//                       <div key={key}>\n//                         <p className=\"errorMessage\">{error.msg}</p>\n//                         <p className=\"passwordTips\">\n//                           Passwords should be between 6 and 12 characters.\n//                         </p>\n//                       </div>\n//                     );\n//                   } else if (error.msg === \"Passwords don't match\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group\n//               className=\"mb-3\"\n//               controlId=\"formBasicPasswordConfirmation\"\n//             >\n//               <Form.Label>Password confirmation</Form.Label>\n//               <Form.Control\n//                 type=\"password\"\n//                 placeholder=\"Confirm password\"\n//                 ref={confirmationPassword}\n//               />\n//             </Form.Group>\n//           </div>\n//           <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n//             <Form.Check type=\"checkbox\" label=\"Check me out\" required />\n//           </Form.Group>\n//           <div className=\"formButton\">\n//             <Button variant=\"primary\" type=\"submit\">\n//               Register\n//             </Button>\n//           </div>\n//         </Form>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default Register;","map":{"version":3,"names":[],"sources":["/Users/j/Desktop/CAB/20Design-MERN/client/src/components/Register.js"],"sourcesContent":["// import React, { useContext, useEffect, useRef, useState } from \"react\";\n// import Button from \"react-bootstrap/Button\";\n// import Form from \"react-bootstrap/Form\";\n// import { useNavigate } from \"react-router-dom\";\n\n// function Register() {\n//   const [errors, setErrors] = useState(null);\n//   const [filteredErrors, setFilteredErrors] = useState(null);\n//   const redirectTo = useNavigate();\n//   const username = useRef();\n//   const firstName = useRef();\n//   const lastName = useRef();\n//   const email = useRef();\n//   const password = useRef();\n//   const confirmationPassword = useRef();\n\n//   const filterErrors = () => {\n//     if (errors) {\n//       for (let i = 0; i < errors.length; i++) {\n//         if (errors[i].msg === \"Email is required\") {\n//           for (let j = 0; j < errors.length; j++) {\n//             if (errors[j].msg === \"Invalid email format\") {\n//               errors.splice(j, 1);\n//               setFilteredErrors(errors);\n//             }\n//           }\n//         } else {\n//           setFilteredErrors(errors);\n//         }\n//       }\n//     }\n//   };\n\n//   const register = async () => {\n//     var myHeaders = new Headers();\n//     myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n//     const urlencoded = new URLSearchParams();\n//     urlencoded.append(\"username\", username.current.value);\n//     urlencoded.append(\"firstName\", firstName.current.value);\n//     urlencoded.append(\"lastName\", lastName.current.value);\n//     urlencoded.append(\"email\", email.current.value);\n//     urlencoded.append(\"password\", password.current.value);\n//     urlencoded.append(\n//       \"password_confirmation\",\n//       confirmationPassword.current.value\n//     );\n\n//     const requestOptions = {\n//       method: \"POST\",\n//       headers: myHeaders,\n//       body: urlencoded,\n//       redirect: \"follow\",\n//     };\n//     try {\n//       const response = await fetch(\n//         `${server}/api/users/register`,\n//         requestOptions\n//       );\n//       const result = await response.json();\n//       if (result.errors) {\n//         setErrors(result.errors);\n//       } else {\n//         alert(\"Registration successful!\");\n//         redirectTo(\"/login\");\n//       }\n//     } catch (error) {\n//       console.log(\"error :>> \", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     filterErrors();\n//   }, [errors]);\n\n//   useEffect(() => {\n//     checkIfUserIsLoggedIn();\n//   }, []);\n\n//   return (\n//     <>\n//   <h1 style={{ textAlign: \"center\" }}>Register</h1>\n\n//         <Form\n//           noValidate\n//           onSubmit={(event) => {\n//             event.preventDefault();\n//             register();\n//           }}\n//           style={{ padding: \"20px\" }}\n//         >\n//           <div className=\"formFlex\">\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\n//               <Form.Label>Username</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 placeholder=\"Enter username\"\n//                 name=\"username\"\n//                 ref={username}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"Username is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   } else if (error.msg === \"Username already in use\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicFirstName\">\n//               <Form.Label>First Name</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 placeholder=\"Enter first name\"\n//                 name=\"firstName\"\n//                 ref={firstName}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"First name is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicLastName\">\n//               <Form.Label>Last Name</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 placeholder=\"Enter last name\"\n//                 name=\"lastName\"\n//                 ref={lastName}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"Last name is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n//               <Form.Label>Email</Form.Label>\n//               <Form.Control\n//                 type=\"email\"\n//                 placeholder=\"Enter email\"\n//                 name=\"email\"\n//                 ref={email}\n//               />\n//               {filteredErrors &&\n//                 filteredErrors.map((error, key) => {\n//                   if (error.msg === \"Email is required\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                   if (error.msg === \"Invalid email format\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   } else if (error.msg === \"Email already in use\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n//               <Form.Label>Password</Form.Label>\n//               <Form.Control\n//                 type=\"password\"\n//                 placeholder=\"Enter password\"\n//                 name=\"password\"\n//                 ref={password}\n//               />\n//               {errors &&\n//                 errors.map((error, key) => {\n//                   if (error.msg === \"Invalid password\") {\n//                     return (\n//                       <div key={key}>\n//                         <p className=\"errorMessage\">{error.msg}</p>\n//                         <p className=\"passwordTips\">\n//                           Passwords should be between 6 and 12 characters.\n//                         </p>\n//                       </div>\n//                     );\n//                   } else if (error.msg === \"Passwords don't match\") {\n//                     return (\n//                       <p key={key} className=\"errorMessage\">\n//                         {error.msg}\n//                       </p>\n//                     );\n//                   }\n//                 })}\n//             </Form.Group>\n//             <Form.Group\n//               className=\"mb-3\"\n//               controlId=\"formBasicPasswordConfirmation\"\n//             >\n//               <Form.Label>Password confirmation</Form.Label>\n//               <Form.Control\n//                 type=\"password\"\n//                 placeholder=\"Confirm password\"\n//                 ref={confirmationPassword}\n//               />\n//             </Form.Group>\n//           </div>\n//           <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n//             <Form.Check type=\"checkbox\" label=\"Check me out\" required />\n//           </Form.Group>\n//           <div className=\"formButton\">\n//             <Button variant=\"primary\" type=\"submit\">\n//               Register\n//             </Button>\n//           </div>\n//         </Form>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default Register;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}